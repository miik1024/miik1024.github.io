<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[到底为何互联网行业总是缺前端工程师?]]></title>
    <url>%2Farchives%2F3423432523%2F</url>
    <content type="text"><![CDATA[放眼全球，不仅在国内的互联网行业，在国外，前端工程师一样是需求旺盛、供不应求的香饽饽。 举个例子，根据 indeed.com 抓取的数千家网站的职位显示：目前前端的热门岗位——「HTML5」是需求增长最快的开发岗位，在所有开发职位中排名第一，MongoDB 和 ios 紧随其后位列第二、第三。 目前，HTML5 可以说是最热门的前端岗位了，在 2010 年和 2014 年底有两次爆发性增长，现在在美国的岗位需求甚至超过了 iOS。 但是，市场上优秀的前端工程师却相对较少，全世界范围看都是个难题。 原因一：前端相对来说是一个新领域，当今的 web 需要更多的工程师 可能很多人认为前端开发和 Web 开发类似，而 Web 开发已经有 20 多年的历史，所以前端并不是一个新领域。然而，前端工程师的概念中的「接口技术实现和用户体验作为一个专业的工作领域」，却无疑是很新的。大概几年前，前端开发的技术增长迅猛，如下图所示： 过去几年前端工程师的可视化增长趋势 by Google Trends 15 年或更久以前，Web 的可视化设计和技术实现所需要的资源是平均分配的。随着网站的发展—网站不仅是一个登录页面，工程资源的需求越来越明显。人们开始专门学习网站专用的 JavaScript、后端技术、UX、数据库，甚至系统设计。 今天，一个像 Airbnb、Facebook、Quora 的 Web 应用程序，投入的工程资源比设计资源多得多。换句话说，如今，做出网页的视觉设计比技术实现要更快，所以当今的市场需要更多的工程师。 现在，一位合格的前端工程师，必须对视觉设计有兴趣。 很显然，要处理大量的 Web 应用程序需求，技术任务就要进行分类，以便于多人同时处理网站请求。事实上现在已经不可能一个人快速地解决所有的技术细节了。 现在还有一类人是独自处理一个 Web 应用程序的所有问题，即「全栈工程师」，但是优秀的全栈工程师同样如大熊猫一般数量稀少。 现在，一个创业公司想要成功，几乎要覆盖一个 Web 应用程序的诸多技术方面：前端、后台、DBA、运营等。虽然已经有一些服务可以让企业购买登陆页面的前端模块和组件；但是如果你想要创造一些真正的 Web 应用程序，除了求助前端工程师，别无他法，就像你要创立一个品牌你也绕不开请一位设计师一样。 原因二：对前端，普遍存在巨大的误解，其实前端一点也不简单 大多人都认为前端开发是一个「相对于其他模块来说更简单的领域」，在他们心中的前端工程师是这样工作的：1、把 Photoshop 文件、图片或者线框放进一个网页；2、偶尔设计 Photoshop 文件、图片或者线框；3、用 Javascript 编程，为网页制作动画、过渡效果；4、用 HTML 和 CSS 编程，确定网页的内容和布局。 事实上，前端工程师在做的是：1、在设计师和工程师之间实现可视化的语言；2、用可视化的设计，定义一组代表内容、品牌和功能的组件；3、为 Web 应用程序的会话、框架、需求、可视化的语言和规格设定底线；4、定义 Web 应用程序的设备、浏览器、屏幕、动画的范围；5、开发一个质量保证指南来确保品牌忠诚度、代码质量、产品标准；6、为 Web 应用程序设定适当的行距、字体、标题、图标、填充等等；7、为 Web 应用程序设定多种分辨率的图像，设备为主的实体模型，同时维护设计指南；8、标记 Web 应用程序，使之语义化， seo友好；9、用一种友好的，耗电少的，设备和客户端感知的方式连接 API，获取信息；10、开发客户端代码来显示流畅的动画、过渡、延迟加载、交互、应用工作流程，大多数时间用来考虑渐进增强和向后兼容的标准；11、保证后台连接安全，采取跨域资源共享 (CORS) 的程序考虑，防止跨站点脚本 (XSS) 和跨站请求伪造 (CSRF) ；12、最重要的是，尽管有严格的期限、利益相关者的要求，以及设备的限制，无论现在还是将来永远是「客户第一」。 为了实现上述目标，前端工程师采用了从可视化到编程的多种工具 ，甚至有时要照顾市场、 UX 到内容改进等等。 原因三：大量糟糕前端工程师的存在，扰乱了市场 这或许是难以招到优秀前端工程师最明显的原因。由于前端工程师的入门门槛非常低， JavaScript、CSS、HTML 并不是很难入门掌握的语言，似乎只要花一点时间，谁都可以通过网上教程和书本学会它。对的，前端工程师市场就是被这些浅尝辄止的家伙搞坏的。 糟糕的前端工程师是这样做事的：1、滥用 JavaScript 库，因为他们实际上并不了 JavaScript 的核心（e.g. 一切都用 jQuery手册&quot;)）；2、滥用 JavaScript 插件，无节制的复用别人的代码，哪怕自己根本读不懂；3、不看需求、设计，也不做比较或评价，就给 Web 应用程序添加 CSS 框架，却只用到框架的一小部分；4、认为只要用了 CSS 框架，网站就是 &quot;响应式布局&quot;)的，或是对响应式设计的意义理解不到位；5、一边在说着「响应式 Web 设计」，却对服务器端解决方案技术一无所知；6、用 CSS 编程时不做预处理器、命名规范等；7、忽视性能、内存泄露（并不理解内存泄露的真正含义），不会检测代码；8、不会用指标衡量一个产品，或者这种指标旨在自己的电脑、浏览器、设备有效；9、忽视 30 年来的软件工程技术，闭门造车。 要知道，入门容易精通难，计算机和软件的基础对你用 JavaScript 或浏览器编程都非常重要。Web 可能是最有影响力的平台和环境之一，在那里执行的程序必须被小心对待。一位优秀的前端工程师不仅要考虑 Web 技术和语言，并且还要了解所有不同的组件、系统和概念。 以下是优秀的前端工程师在即时面对普通的任务也会做的事情（这才是市场急需的前端）：1、DNS 解析，使用 CDN，把资源请求分散到多个域名上去；2、理解 HTTP Headers (Expires、Cache-Control、If-Modified-Since)3、Steve Souders 的所有高性能网页优化规则4、如何解决 PageSpeed、YSlow、Chrome Dev Tools Audit、Chrome Dev Tools Timeline 等工具列出的所有问题；5、何时把任务传到服务器，何时适合传到客户端；6、缓存，预取和延迟加载技术的使用；7、原生 JavaScript，知道何时从头开始做，何时参考别人的代码，同时可以评估这样做的优缺点；8、 最新的 MVC Javascript 库知识以及用法；9、CSS 标准的知识与用法；10、JavaScript的计算机科学部分的知识（内存管理，垃圾收集算法等等等等） 换句话说，如果说掌握(或者某些简历里自称的精通) HTML+CSS+JavaScript，了解后端知识，只是 60 分的合格前端；那么要想成为受追捧、拿高薪的 80 分优秀前端，要对业务需求和、架构设计有真正的运用；而 100 分的顶级前端，则必须要能够兼顾技术和设计，更接近「以前端开发为主的全栈工程师」了。 100offer 说：市场不是缺少前端，而是缺少优秀的前端工程师 现在，前端工程师终于前所未有的在 Web 中占有了一席之地。随着多设备、浏览器和 Web 标准的演变革命，前端正在成为兼顾逻辑、性能、交互、体验的综合性岗位。]]></content>
      <categories>
        <category>IT行业动态</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Hexo框架创建一个高效率个性化私人博客总结]]></title>
    <url>%2Farchives%2Fhello-world%2F</url>
    <content type="text"><![CDATA[talk is cheap ,下面开始 必须准备Node.jsGitGitHub 账户及仓库 安装nodejsHexo 的安装创建博客目录，该目录下 ：git bash 输入命令：npm install -g hexo-cli 创建hexo文件夹博客目录下hexo init 安装依赖包npm install 站点配置必须要改动的title: xxx # 博客名，站点名称author: xxx # 博客作者名字description: xxx # 对站点的描述，搜索引擎会抓取，可以自定义language: zh-Hans # 语言 简体中文theme: next # 配置主题，后面会讲到主题配置 发布必须要增加的deploy: # 部署相关配置type: git # 使用 Git 提交repository: git@github.com/username/username.github.io.git# 博客仓库地址#repository: https://github.com/xxx/xxx.github.io.git 注意：nodejs 3.0版本以上不再使用：https://github.com/username/username.github.io.git 本地查看默认站点生成文件hexo g 或 hexo generate 启动服务hexo s 或 hexo server 浏览器输入localhost:4000查看 发布，部署到github确认站点配置文件配置正确deploy:type: gitrepository: https://github.com:username/username.github.io.gitbranch: master 发布hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 发布无反应且页面为404时： 站点配置：repository: git@github.com:path/username.github.io.git，GitHub仓库需为username.github.io 每次修改本地配置文件后，需要hexo generate才能保存。每次使用命令时，都要在博客所在目录下进行。 恭喜，博客已经初步创建成功 发布文章hexo new &quot;博客文章文件名&quot; 或新建md文件放到/source/_posts文件夹或其子文件夹中 文章要按照规定格式书写 如： title: 个人博客搭建详解（Windows和Mac通用版） # 这是标题tags: # 这里写的标签会自动汇集到 tags 页面上 实用 # 可配置多个标签，注意格式 个人博客category: # 这里写的分类会自动汇集到 categories 页面上，分类可以多级 实用技术 # 一级分类 个人博客 # 二级分类 本地预览文章清除缓存： hexo clean生成静态网页： hexo g预览： hexo s 注意1. 已发布的文章发生修改， 可直接预览，即 不执行上述3个命令,刷新浏览器即可;2. 远程部署必须要执行上述命令3. 修改内容一旦预览与修改不一致，则需要clean 也可一次性执行：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 创建分类及标签页面分类命令：hexo new page “categories” 找到 index.md文件编辑： 增加页面类型：type: “categories” #将页面的类型设置为categories标签hexo new page &quot;tags&quot;index.md文件设置页面类型:`type: “tags”` 站点配置：启用分类及标签，清除缓存，生成页面，启动服务预览，无问题后发布 404页面hexo new page &quot;404&quot; 编辑source/404.md即可 404页面参考Next 主题修改 主题文件拷贝到themes目录下 站点配置文件theme：nexthexo generate 保存 主题配置文件打开任意一项 Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 验证hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 博客已经初步完成。 Hexo相关命令总结hexo clean #清除缓存hexo g #保存修改，生成文件hexo s #启动本地服务hexo d #发布到远程hexo init #生成站点hexo new page "xxx" #生成页面hexo new "" #生成文章npm install --save xxx #安装插件npm unstall xxx #卸载插件 上述命令将贯穿于整个博客过程，不难，能动手尽量别复制粘贴 全程在博客目录下进行，离不开gitbash 建站问题及错误遇到问题不要慌，大胆猜测小心验证 站点配置文件Sitekey: value#字段后必须空格 hexo d 发布时问题：ERROR Deployer not found: git 如果使用git方式进行部署需要需要安装对应的插件 解决：安装自动部署发布工具npm install hexo-deployer-git --save 发布后页面404或无反应github创建的仓库名必须为：username.github.io 配置文件：key: value必须空格 FATAL Cannot read property ‘replace’ of null解决:站点配置文件 URLurl: http://yoursite.com url不能为空 发布时无反应，username.github.io 404定位：站点配置：发布地址为https://github.com/path/username.github.io.git 解决：3.0版本以上使用如下配置：发布地址修改为git@github.com:yourname/yourname.github.io.git git bash 提示如下表示发布成功 发表文章标题显示为无标题定位：手动新建的md文件 放于source文件夹且 文件遵守规则 解决：使用git bash 命令： hexo new”xxx文件名”此时 自动在source文件夹下生成 xxx文件名的md 文件，自带标题，修改此标题 即可 测试标题显示情况实验手动创建文章遵守规则 title: 文章测试文件tags:category: 启动服务，验证：成功 已有md文件，手动添加title遵守规则成功 复现文章标题失败情景复现失败猜测：网页缓存或浏览器缓存导致，待验证 hexo g 生成静态网页时 类似错误参考 问题重点：Error: Unable to call __, which is undefined or falsey 定位：md文件出现不识别字符：’__’ 解决： 找到对应字符，转义或删除 404页面直接添加到站点失败参考知乎 使用 hexo new page&quot;404&quot;，编辑index.md文件即可 部署到GitHub后头像显示失败图片放于主题：./themes/next/source/images/路径，显示成功站点:./source/uploads/路径，显示失败 主题完整路径：./themes/next/source/images/avatar.jpg 主题配置：avatar: /images/avatar.jpg]]></content>
      <categories>
        <category>Hexo</category>
        <category>主题配置</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>hexo theme</tag>
        <tag>参数配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建和使用过程中常用的命令总结]]></title>
    <url>%2Farchives%2Fhexo%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[hexonpm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化``` ## 简写```bash`hexo n "我的博客"` == `hexo new "我的博客"` #新建文章`hexo p` == `hexo publish``hexo g` == `hexo generate`#生成`hexo s` == `hexo server` #启动服务预览`hexo d` == `hexo deploy`#部署 服务器`hexo server` #Hexo 会监视文件变动并自动更新，您无须重启服务器。`hexo server -s` #静态模式`hexo server -p 5000` #更改端口`hexo server -i 192.168.1.1` #自定义 IP`hexo clean` #清除缓存 网页正常情况下可以忽略此条命令`hexo g` #生成静态网页`hexo d` #开始部署 监视文件变动`hexo generate` #使用 Hexo 生成静态文件快速而且简单`hexo generate --watch` #监视文件变动 完成后部署&gt; 两个命令的作用是相同的&gt; `hexo generate --deploy`&gt; `hexo deploy --generate``hexo deploy -g``hexo server -g` 草稿hexo publish [layout] &lt;title&gt; 模版`hexo new "postName"` #新建文章`hexo new page "pageName"` #新建页面`hexo generate` #生成静态页面至public目录`hexo server` #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）`hexo deploy` #将.deploy目录部署到GitHub`hexo new [layout] &lt;title&gt;``hexo new photo "My Gallery"``hexo new "Hello World" --lang tw` 变量 描述 layout 布局 title 标题 date 文件建立日期 title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞. 模版（Scaffold）`hexo new photo &quot;My Gallery&quot;` 变量 描述 layout 布局 title 标题 date 文件建立日期 设置文章摘要 以下是余下全文``` ## 写作```bash`hexo new page &lt;title&gt;``hexo new post &lt;title&gt;` 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 推送到服务器上`hexo n` #写文章`hexo g` #生成`hexo d` #部署 #可与`hexo g`合并为 `hexo d -g` 报错1.找不到git部署ERROR Deployer not found: git 解决方法`npm install hexo-deployer-git --save` 3.部署类型设置githexo 3.0 部署类型不再是github，_config.yml 中修改 # Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@***.github.com:***/***.github.io.git branch: master ``` ### 4\. xcodebuildxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance npm install bcrypt### 5\. RSS不显示#### 安装RSS插件 npm install hexo-generator-feed --save#### 开启RSS功能编辑hexo/_config.yml，添加如下代码：``` bashrss: /atom.xml #rss地址 默认即可``` #### 开启评论1.我使用多说代替自带的评论，在[多说](http://duoshuo.com/) 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name1. 在根目录 `_config.yml` 添加一行 `disqus_shortname: jslite` 是在多说注册时产生的2. 复制到 `themes\landscape\layout\_partial\article.ejs` 把``` bash&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;&lt;section id=&quot;comments&quot;&gt;&lt;div id=&quot;disqus_thread&quot;&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/section&gt;&lt;% &#125; %&gt;``` 改为```bash&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id=&quot;comments&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.disqus_shortname %&gt;&apos;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
